---
- name: Enroll and download Keyfactor certificate via AWX
  hosts: server01
  gather_facts: yes

  # These variables are expected to be passed by the AWX Survey or a vaulted file.
  # - change_number
  # - cn_name
  - ca_name
  # - password
  # - dns_names_input
  # - ip_addresses_input
  # - metadata_email_contact
  # - metadata_device_type
  # - metadata_datacenter_location
  # - metadata_primary_contact
  # - metadata_secondary_contact
  # - metadata_permissions
  # - metadata_folder
  # - metadata_sub_folder
  # - metadata_contact
  # - metadata_description
  # - keyfactor_url (from vaulted file)
  # - https_proxy (from vaulted file)
  # - auth (from vaulted file)

  tasks:
    - name: Prepare SANs for JSON payload
      ansible.builtin.set_fact:
        dns_names: "{{ dns_names_input.split(',') | map('trim') | list }}"
        ip_addresses: "{{ ip_addresses_input.split(',') | map('trim') | list }}"

    - name: Set timestamp variable from gathered facts
      ansible.builtin.set_fact:
        TIMESTAMP: "{{ ansible_date_time.iso8601 }}"

    - name: Generate certificate enrollment payload
      ansible.builtin.template:
        src: payload.json.j2
        dest: "/tmp/{{ cn_name }}_payload.json"
      vars:
        TIMESTAMP: "{{ TIMESTAMP }}"
        TEMPLATE: "WebServer(13Month-ClientandServerAuth)PROD"
        CN_NAME: "{{ cn_name }}"
        CA_NAME: "{{ ca_name }}"
        PASSWORD_CONFIRM: "{{ password }}"
        DNS_JSON: "{{ dns_names | to_json }}"
        IP_JSON: "{{ ip_addresses | to_json }}"
        METADATA_EMAIL: "{{ metadata_email_contact }}"
        METADATA_DEVICE: "{{ metadata_device_type }}"
        METADATA_DATACENTER: "{{ metadata_datacenter_location }}"
        METADATA_PRIMARY_CONTACT: "{{ metadata_primary_contact }}"
        METADATA_SECONDARY_CONTACT: "{{ metadata_secondary_contact }}"
        METADATA_PERMISSIONS: "{{ metadata_permissions }}"
        METADATA_FOLDER: "{{ metadata_folder }}"
        METADATA_SUB_FOLDER: "{{ metadata_sub_folder }}"
        METADATA_CONTACT: "{{ metadata_contact }}"
        METADATA_DESCRIPTION: "{{ metadata_description }}"

    - name: Read payload.json from remote host into memory
      ansible.builtin.slurp:
        src: "/tmp/{{ cn_name }}_payload.json"
      register: payload_content

    - name: Enroll PFX certificate with Keyfactor API
      ansible.builtin.uri:
        url: "{{ keyfactor_url }}/KeyfactorApi/Enrollment/PFX"
        method: POST
        headers:
          Authorization: "Basic {{ auth }}"
          Accept: "application/json"
          x-certificateformat: "PFX"
          X-Keyfactor-Requested-With: "XMLHttpRequest"
          Content-Type: "application/json"
        body: "{{ payload_content.content | b64decode }}"
        body_format: json
        validate_certs: no
        return_content: yes
        dest: "/tmp/{{ cn_name }}_response.json"
        use_proxy: yes
      register: enrollment_response

    - name: Fail if API call was unsuccessful
      ansible.builtin.fail:
        msg: "Keyfactor API call failed with status code: {{ enrollment_response.status }} and response: {{ enrollment_response.content }}"
      when: enrollment_response.status != 200

    - name: Extract thumbprint from enrollment response
      ansible.builtin.set_fact:
        thumbprint: "{{ enrollment_response.json.CertificateInformation.Thumbprint }}"

    - name: Download PFX certificate from Keyfactor
      ansible.builtin.uri:
        url: "{{ keyfactor_url }}/KeyfactorApi/Certificates/recover"
        method: POST
        headers:
          Authorization: "Basic {{ auth }}"
          Content-Type: "application/json"
          Accept: "application/octet-stream"
          X-Keyfactor-Requested-With: "APIClient"
          X-CertificateFormat: "PFX"
        body:
          Thumbprint: "{{ thumbprint }}"
          IncludeChain: true
          Password: "{{ password }}"
        body_format: json
        dest: "/tmp/{{ cn_name }}.pfx"
        validate_certs: no
        use_proxy: yes

    - name: Create backup directory
      ansible.builtin.file:
        path: "/tmp/{{ change_number }}"
        state: directory

    - name: Move JSON and certificate files to backup directory
      ansible.builtin.command:
        cmd: "mv /tmp/{{ cn_name }}_payload.json /tmp/{{ cn_name }}_response.json /tmp/{{ cn_name }}.pfx /tmp/{{ change_number }}"
